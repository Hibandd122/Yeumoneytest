(async () => {
    'use strict';

    const DEFAULT_COLOR = "linear-gradient(135deg, rgb(31, 176, 196), rgb(20, 164, 201))";
    const URL_MAP = Object.freeze({
        w88: "https://188.166.185.213",
        '188bet': "https://165.22.63.250",
        vn88: "https://vn88ne.com/",
        m88: "https://bet88so.com",
        fb88: "https://fb88nk.com/",
        bk8: "https://bk8ze.com",
        v9bet: "https://v9betsk.com/"
    });

    let keyword = "";
    let trafficUrl = "";
    let codeLink = "";
    let finalUrl = "";
    let countdownTimer = null;

    // Color options for validation
    const colorOptions = [
        { name: "Mặc định", value: DEFAULT_COLOR },
        { name: "Xanh lá", value: "linear-gradient(135deg, #4CAF50, #81C784)" },
        { name: "Đỏ", value: "linear-gradient(135deg, #F44336, #E57373)" },
        { name: "Vàng", value: "linear-gradient(135deg, #FFEB3B, #FFF176)" },
        { name: "Tím", value: "linear-gradient(135deg, #9C27B0, #CE93D8)" },
        { name: "Cam", value: "linear-gradient(135deg, #FF5722, #FFAB91)" },
        { name: "Xanh dương", value: "linear-gradient(135deg, #2196F3, #64B5F6)" },
        { name: "Hồng", value: "linear-gradient(135deg, #E91E63, #F06292)" },
        { name: "Xám", value: "linear-gradient(135deg, #607D8B, #B0BEC5)" },
        { name: "Nâu", value: "linear-gradient(135deg, #795548, #A1887F)" },
        { name: "Xanh ngọc", value: "linear-gradient(135deg, #00BCD4, #4DD0E1)" },
        { name: "Tím đậm", value: "linear-gradient(135deg, #673AB7, #9575CD)" }
    ];

    // Helper functions for localStorage
    const getStoredValue = (key, defaultValue) => {
        try {
            const value = localStorage.getItem(key);
            if (value === null) return defaultValue;
            const parsed = JSON.parse(value);
            if (key === "maContainerColor" && !colorOptions.some(opt => opt.value === parsed)) {
                return defaultValue;
            }
            if ((key === "autoRedirect" || key === "containerVisible") && typeof parsed !== "boolean") {
                return defaultValue;
            }
            return parsed;
        } catch (e) {
            return defaultValue;
        }
    };

    const setStoredValue = (key, value) => {
        try {
            localStorage.setItem(key, JSON.stringify(value));
            // Verify write
            if (JSON.parse(localStorage.getItem(key)) !== value) {
                throw new Error("Write verification failed");
            }
        } catch (e) {
            console.log(`Failed to save ${key}`);
        }
    };

    // Check if current URL matches check_code.php?token=*
    const isCheckCodePage = /^https:\/\/yeumoney\.com\/quangly\/check_code\.php\?token=/.test(window.location.href);

    // Initialize container (only if not on check_code.php)
    let container = null;
    if (!isCheckCodePage) {
        container = document.body.appendChild(Object.assign(document.createElement("div"), {
            id: "maContainer",
            style: `
                position: fixed;
                inset: 0;
                background: ${getStoredValue("maContainerColor", DEFAULT_COLOR)};
                padding: 20px;
                font: 600 28px 'Segoe UI', Arial, sans-serif;
                color: #4a3467;
                z-index: 9999;
                display: ${getStoredValue("containerVisible", true) ? 'flex' : 'none'};
                flex-direction: column;
                justify-content: center;
                align-items: center;
                overflow-y: auto;
                text-align: center;
                box-shadow: inset 0 0 15px rgba(0,0,0,0.05);
                transition: background 0.3s ease;
            `
        }));
    }

    // Persistent controls container (only if not on check_code.php)
    let controls = null;
    if (!isCheckCodePage) {
        controls = document.body.appendChild(Object.assign(document.createElement("div"), {
            style: `
                position: fixed;
                bottom: 50px;
                left: 50%;
                transform: translateX(-50%);
                display: flex;
                gap: 20px;
                z-index: 10000;
            `
        }));

        // Auto Redirect Button
        const autoRedirectBtn = controls.appendChild(Object.assign(document.createElement("button"), {
            innerHTML: `🔄 Tự động chuyển hướng: ${getStoredValue("autoRedirect", true) ? "Bật" : "Tắt"}`,
            style: `
                padding: 10px 25px;
                background: ${getStoredValue("autoRedirect", true) ? "#4CAF50" : "#e53e3e"};
                color: #fff;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font: 600 18px 'Segoe UI';
                transition: all 0.3s;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            `,
            onmouseover: e => Object.assign(e.target.style, {
                backgroundColor: getStoredValue("autoRedirect", true) ? "#388E3C" : "#c53030",
                transform: "translateY(-2px)"
            }),
            onmouseout: e => Object.assign(e.target.style, {
                backgroundColor: getStoredValue("autoRedirect", true) ? "#4CAF50" : "#e53e3e",
                transform: "translateY(0)"
            }),
            onclick: () => {
                const newState = !getStoredValue("autoRedirect", true);
                setStoredValue("autoRedirect", newState);
                autoRedirectBtn.innerHTML = `🔄 Tự động chuyển hướng: ${newState ? "Bật" : "Tắt"}`;
                autoRedirectBtn.style.backgroundColor = newState ? "#4CAF50" : "#e53e3e";
            }
        }));

        // Change Task Button
        controls.appendChild(Object.assign(document.createElement("button"), {
            innerHTML: "🔄 Đổi nhiệm vụ",
            style: `
                padding: 10px 25px;
                background: #e53e3e;
                color: #fff;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font: 600 18px 'Segoe UI';
                transition: all 0.3s;
                box-shadow: 0 4px 15px rgba(229,62,62,0.3);
            `,
            onmouseover: e => Object.assign(e.target.style, { backgroundColor: "#c53030", transform: "translateY(-2px)" }),
            onmouseout: e => Object.assign(e.target.style, { backgroundColor: "#e53e3e", transform: "translateY(0)" }),
            onclick: () => location.reload(true)
        }));

        // Show/Hide Container Button
        const toggleContainerBtn = controls.appendChild(Object.assign(document.createElement("button"), {
            innerHTML: `👁 ${getStoredValue("containerVisible", true) ? "Ẩn" : "Hiện"} bảng`,
            style: `
                padding: 10px 25px;
                background: ${getStoredValue("containerVisible", true) ? "#2196F3" : "#757575"};
                color: #fff;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font: 600 18px 'Segoe UI';
                transition: all 0.3s;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            `,
            onmouseover: e => Object.assign(e.target.style, {
                backgroundColor: getStoredValue("containerVisible", true) ? "#1976D2" : "#616161",
                transform: "translateY(-2px)"
            }),
            onmouseout: e => Object.assign(e.target.style, {
                backgroundColor: getStoredValue("containerVisible", true) ? "#2196F3" : "#757575",
                transform: "translateY(0)"
            }),
            onclick: () => {
                const newState = !getStoredValue("containerVisible", true);
                setStoredValue("containerVisible", newState);
                container.style.display = newState ? 'flex' : 'none';
                toggleContainerBtn.innerHTML = `👁 ${newState ? "Ẩn" : "Hiện"} bảng`;
                toggleContainerBtn.style.backgroundColor = newState ? "#2196F3" : "#757575";
            }
        }));

        // Color picker button
        const colorBtn = document.body.appendChild(Object.assign(document.createElement("button"), {
            innerHTML: "🎨 Đổi màu",
            style: `
                position: fixed;
                bottom: 10px;
                right: 10px;
                padding: 8px 15px;
                background: #4a90e2;
                color: #fff;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 14px;
                z-index: 10000;
                transition: all 0.3s;
            `,
            onmouseover: e => Object.assign(e.target.style, { backgroundColor: "#357abd", transform: "translateY(-2px)" }),
            onmouseout: e => Object.assign(e.target.style, { backgroundColor: "#4a90e2", transform: "translateY(0)" })
        }));

        // Color picker panel
        const colorPanel = document.body.appendChild(Object.assign(document.createElement("div"), {
            style: `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: #fff;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                z-index: 10001;
                display: none;
                width: 500px;
                max-height: 80vh;
                overflow-y: auto;
                flex-wrap: wrap;
                justify-content: center;
                gap: 15px;
            `
        }));

        colorOptions.forEach(({ name, value }) => {
            colorPanel.appendChild(Object.assign(document.createElement("button"), {
                innerHTML: name,
                style: `
                    padding: 10px 20px;
                    background: ${value};
                    color: #fff;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                    width: 120px;
                    transition: transform 0.3s;
                `,
                onmouseover: e => e.target.style.transform = "translateY(-2px)",
                onmouseout: e => e.target.style.transform = "translateY(0)",
                onclick: () => {
                    setStoredValue("maContainerColor", value);
                    if (container) container.style.background = value;
                    updateTableColors(value);
                    colorPanel.style.display = "none";
                }
            }));
        });

        colorBtn.onclick = () => {
            colorPanel.style.display = (colorPanel.style.display === "none" ? "flex" : "none");
        };
    }

    // Table creation with countdown timer
    const createTable = (status, code = "N/A", keyword = "N/A", traffic = "N/A", url = "N/A", timeLeft = "") => {
        if (isCheckCodePage || !container) return;
        container.innerHTML = '';
        const tableStyles = `
            table {
                width: 100%;
                border-collapse: separate;
                border-spacing: 0;
                background: #f7fafc;
                font: 22px 'Segoe UI', Arial, sans-serif;
                text-align: center;
                box-shadow: 0 8px 30px rgba(0,0,0,0.15);
                border-radius: 15px;
                overflow: hidden;
            }
            th {
                background: linear-gradient(135deg, #1e90ff, #00ced1);
                color: #fff;
                padding: 20px;
                text-transform: uppercase;
                letter-spacing: 1.5px;
                font-weight: 700;
                min-width: 200px;
                border-bottom: 3px solid rgba(255,255,255,0.2);
                transition: background 0.3s;
            }
            th:hover { background: linear-gradient(135deg, #00ced1, #1e90ff); }
            td {
                padding: 18px;
                border-bottom: 1px solid #e0e0e0;
                font-weight: 500;
                min-width: 200px;
                max-width: 400px;
                word-break: break-word;
                color: #2d3748;
                transition: background 0.3s;
            }
            td:nth-child(even) { background: #edf2f7; }
            td:nth-child(odd) { background: #f7fafc; }
            td:hover { background: #e2e8f0; }
            .final-url {
                padding: 25px;
                background: linear-gradient(135deg, #f7fafc, #e6fffa);
                color: #1a202c;
                font-weight: 600;
                border-top: 2px dashed #b2f5ea;
            }
            @media (max-width: 768px) {
                th, td { min-width: 120px; font-size: 18px; padding: 12px; }
            }
        `;

        const table = container.appendChild(Object.assign(document.createElement("div"), {
            style: "width: 95%; max-width: 1400px; overflow-x: auto; padding: 10px;"
        })).appendChild(Object.assign(document.createElement("div"), {
            style: `
                padding: 15px;
                background: #fff;
                border: 8px solid;
                border-image: linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet) 1;
                border-radius: 20px;
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            `
        })).appendChild(Object.assign(document.createElement("table"), {
            innerHTML: `
                <tr>
                    <th>📊 Status</th>
                    <th>🔑 Mã</th>
                    <th>🔍 Từ khoá</th>
                    <th>🚦 Loại Traffic</th>
                    <th>⏱ Thời gian còn lại</th>
                </tr>
                <tr>
                    <td>${status}</td>
                    <td>${code}</td>
                    <td>${keyword}</td>
                    <td>${traffic}</td>
                    <td>${timeLeft}</td>
                </tr>
                <tr>
                    <td colspan="5" class="final-url">
                        <div><span style="color:#000;font-weight:700;">🔗 Final URL:</span> ${url}</div>
                        ${url !== "N/A" ? '<button style="margin-top:15px;padding:10px 25px;background:#00ff22;color:#fff;border:none;border-radius:8px;cursor:pointer;font:600 18px Segoe UI;transition:all 0.3s;box-shadow:0 4px 15px rgba(229,62,62,0.3);">📋 Copy</button>' : ''}
                    </td>
                </tr>
            `
        }));

        document.head.appendChild(Object.assign(document.createElement("style"), { textContent: tableStyles }));

        if (url !== "N/A") {
            const copyBtn = table.querySelector("button");
            copyBtn.onmouseover = () => Object.assign(copyBtn.style, { backgroundColor: "#4CAF50", transform: "translateY(-2px)" });
            copyBtn.onmouseout = () => Object.assign(copyBtn.style, { backgroundColor: "#00FF22", transform: "translateY(0)" });
            copyBtn.onclick = async () => {
                try {
                    await navigator.clipboard.writeText(url);
                    copyBtn.innerHTML = "✅ Copied!";
                    setTimeout(() => copyBtn.innerHTML = "📋 Copy", 2000);
                } catch (err) {
                    // Silent fail
                }
            };
        }

        updateTableColors(getStoredValue("maContainerColor", DEFAULT_COLOR));
    };

    // Update table colors
    const updateTableColors = selectedColor => {
        if (isCheckCodePage || !container) return;
        const colorMap = {
            [DEFAULT_COLOR]: { th: "#1e90ff", tdEven: "#edf2f7", tdOdd: "#f7fafc", finalTd: "#e6fffa", button: "#00ff22" },
            "linear-gradient(135deg, #4CAF50, #81C784)": { th: "#388E3C", tdEven: "#E8F5E9", tdOdd: "#F1F8E9", finalTd: "#C8E6C9", button: "#4CAF50" },
            "linear-gradient(135deg, #F44336, #E57373)": { th: "#D32F2F", tdEven: "#FFEBEE", tdOdd: "#FFCDD2", finalTd: "#EF9A9A", button: "#F44336" },
            "linear-gradient(135deg, #FFEB3B, #FFF176)": { th: "#FBC02D", tdEven: "#FFF9C4", tdOdd: "#FFFDE7", finalTd: "#FFF59D", button: "#FFEB3B" },
            "linear-gradient(135deg, #9C27B0, #CE93D8)": { th: "#7B1FA2", tdEven: "#F3E5F5", tdOdd: "#E1BEE7", finalTd: "#CE93D8", button: "#9C27B0" },
            "linear-gradient(135deg, #FF5722, #FFAB91)": { th: "#E64A19", tdEven: "#FFCCBC", tdOdd: "#FFEBEE", finalTd: "#FFAB91", button: "#FF5722" },
            "linear-gradient(135deg, #2196F3, #64B5F6)": { th: "#1976D2", tdEven: "#BBDEFB", tdOdd: "#E3F2FD", finalTd: "#90CAF9", button: "#2196F3" },
            "linear-gradient(135deg, #E91E63, #F06292)": { th: "#C2185B", tdEven: "#FCE4EC", tdOdd: "#F8BBD0", finalTd: "#F48FB1", button: "#E91E63" },
            "linear-gradient(135deg, #607D8B, #B0BEC5)": { th: "#455A64", tdEven: "#CFD8DC", tdOdd: "#ECEFF1", finalTd: "#B0BEC5", button: "#607D8B" },
            "linear-gradient(135deg, #795548, #A1887F)": { th: "#5D4037", tdEven: "#D7CCC8", tdOdd: "#EFEBE9", finalTd: "#BCAAA4", button: "#795548" },
            "linear-gradient(135deg, #00BCD4, #4DD0E1)": { th: "#0097A7", tdEven: "#B2EBF2", tdOdd: "#E0F7FA", finalTd: "#80DEEA", button: "#00BCD4" },
            "linear-gradient(135deg, #673AB7, #9575CD)": { th: "#512DA8", tdEven: "#EDE7F6", tdOdd: "#D1C4E9", finalTd: "#B39DDB", button: "#673AB7" }
        };
        const colors = colorMap[selectedColor] || colorMap[DEFAULT_COLOR];
        const table = document.querySelector("table");
        if (table) {
            table.style.backgroundColor = colors.tdOdd;
            document.querySelectorAll("th").forEach(th => th.style.background = `linear-gradient(135deg, ${colors.th}, ${colors.button})`);
            document.querySelectorAll("td:not([colspan])").forEach((td, i) => td.style.backgroundColor = i % 2 ? colors.tdEven : colors.tdOdd);
            const finalTd = document.querySelector(".final-url");
            if (finalTd) finalTd.style.background = `linear-gradient(135deg, ${colors.tdOdd}, ${colors.finalTd})`;
            const btn = document.querySelector("button[style*='background']");
            if (btn) btn.style.backgroundColor = colors.button;
        }
    };

    // Core logic
    codeLink = Array.from(document.getElementsByTagName("script")).find(s => s.textContent.includes("var code_link"))?.textContent.match(/var code_link = "(.*?)";/)?.[1] || "";

    if (isCheckCodePage) {
        console.log('Skipping core logic on check_code.php');
        return;
    }

    const findKeyword = () => {
        createTable("Đang tìm nhiệm vụ");
        const check = () => {
            const tk1 = document.getElementById("TK1")?.textContent.trim();
            if (tk1) {
                keyword = tk1;
                handleTrafficType(tk1.toLowerCase());
            } else {
                setTimeout(check, 100);
            }
        };
        check();
    };

    const handleTrafficType = type => {
        trafficUrl = URL_MAP[type] || "";
        createTable("Đang get mã", "", keyword, trafficUrl);
        if (trafficUrl) {
            startBypass(trafficUrl);
        } else {
            createTable("Lỗi", "", keyword, "", "Không tìm thấy URL");
            setTimeout(() => location.reload(true), 1000);
        }
    };

    const sendRequest = async (url) => {
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                },
                body: ''
            });
            if (!response.ok) {
                createTable("Lỗi HTTP", "", keyword, trafficUrl, finalUrl);
                throw new Error(`HTTP error: ${response.status}`);
            }
            return await response.text();
        } catch (error) {
            createTable("Lỗi mạng", "", keyword, trafficUrl, finalUrl);
            setTimeout(() => location.reload(true), 1000);
            throw error;
        }
    };

    const sendFirstRequest = async (ymnclk) => {
        const resp = await sendRequest(`https://traffic-user.net/GET_VUATRAFFIC.php?data=${Date.now()},https://www.google.com/,undefined,IOS900,hidden,null&clk=${ymnclk || ''}`);
        const match = resp.match(/localStorage.codexn\s*=\s*'([\w-]+)'/);
        if (!match) {
            createTable("Lỗi codexn", "", keyword, trafficUrl, finalUrl);
            throw new Error("No codexn found");
        }
        return match[1];
    };

    const sendSecondRequest = async (url, codexn, ymnclk) => {
        const resp = await sendRequest(`https://traffic-user.net/GET_MA.php?codexn=${codexn}&url=${encodeURIComponent(url)}&loai_traffic=https://www.google.com/&clk=${ymnclk || ''}`);
        if (/<script>\s*sessionStorage\.removeItem\("ymnclk"\);\s*<\/script>/gi.test(resp)) {
            sessionStorage.removeItem("ymnclk");
            const match = resp.match(/<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*<\/span>/);
            return match ? match[1] : null;
        }
        const match = resp.match(/sessionStorage.setItem\("ymnclk",\s*(\d+)\)/);
        if (match) return match[1];
        createTable("Lỗi ymnclk", "", keyword, trafficUrl, finalUrl);
        throw new Error("No ymnclk found");
    };

    const fillCodeInput = (code) => {
        try {
            const codeInput = document.querySelector('input[name="code"]');
            if (!codeInput) {
                createTable("Lỗi", code, keyword, trafficUrl, finalUrl, "N/A");
                throw new Error("Input field not found");
            }
            codeInput.value = code;
            return true;
        } catch (err) {
            createTable("Lỗi nhập mã", code, keyword, trafficUrl, finalUrl, "N/A");
            setTimeout(() => location.reload(true), 1000);
            throw err;
        }
    };

    const submitCode = async () => {
        try {
            const submitButton = document.querySelector('#btn-xac-nhan');
            if (!submitButton) {
                createTable("Lỗi", "", keyword, trafficUrl, finalUrl, "N/A");
                throw new Error("Submit button not found");
            }
            submitButton.click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            finalUrl = window.location.href;
            createTable("Hoàn thành", "", keyword, trafficUrl, finalUrl, "N/A");
            setInterval(() => getStoredValue("autoRedirect", true) && finalUrl && (window.location.href = finalUrl), 500);
        } catch (err) {
            createTable("Lỗi submit", "", keyword, trafficUrl, finalUrl, "N/A");
            setTimeout(() => location.reload(true), 1000);
            throw err;
        }
    };

    const startBypass = async url => {
        try {
            const codexn1 = await sendFirstRequest(null);
            const ymnclk1 = await sendSecondRequest(url, codexn1, null);
            const codexn2 = await sendFirstRequest(ymnclk1);
            const code = await sendSecondRequest(`${url}/admin`, codexn2, ymnclk1);
            if (code) {
                if (fillCodeInput(code)) {
                    let timeLeft = 80;
                    createTable("Sắp hoàn thành", code, keyword, trafficUrl, finalUrl, `${timeLeft}s`);
                    countdownTimer = setInterval(() => {
                        timeLeft--;
                        createTable("Sắp hoàn thành", code, keyword, trafficUrl, finalUrl, `${timeLeft}s`);
                        if (timeLeft <= 0) {
                            clearInterval(countdownTimer);
                            submitCode();
                        }
                    }, 1000);
                }
            } else {
                throw new Error("No code received");
            }
        } catch (err) {
            createTable("Lỗi", "", keyword, url, finalUrl || "Không lấy được URL", "N/A");
            setTimeout(() => location.reload(true), 1000);
        }
    };

    findKeyword();
})();
